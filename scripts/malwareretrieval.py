import os
import json
import pandas as pd
import sys
import subprocess
import time

# Getting the tag from user
SearchMalwareFamily = sys.argv[1]

# Directory path
base_dir = "/var/www/html/"
json_dir = os.path.join(base_dir, "Downloaded/json/")
samples_dir = os.path.join(base_dir, "Downloaded/samples/")
csv_dir = os.path.join(base_dir, "csv/")

if not os.path.exists(json_dir):
    os.makedirs(json_dir)

if not os.path.exists(samples_dir):
    os.makedirs(samples_dir)

if not os.path.exists(csv_dir):
    os.makedirs(csv_dir)

# Saving json
os.system('wget --post-data "query=get_taginfo&tag=%s&file_type=exe&limit=10" https://mb-api.abuse.ch/api/v1/ -O %s%s.json' % (SearchMalwareFamily, json_dir, SearchMalwareFamily))

# Converting the json to csv
file = open('%s%s.json' % (json_dir, SearchMalwareFamily))
data = json.load(file)
malwares = []

# Function to Download Malware sample with <sha256 hash>.zip
def DownloadSample(sha256):
    print(f"Downloading {sha256}...")
    file_path = os.path.join(samples_dir, f"{sha256}.zip")
    result = os.system('wget --post-data "query=get_file&sha256_hash=%s" https://mb-api.abuse.ch/api/v1/ -O %s' % (sha256, file_path))
    if result == 0:
        print(f"Downloaded {sha256} at {file_path}")
    else:
        print(f"Failed to download {sha256}.")

for i in data['data']:
    malwares.append(i)
    # Uncomment the following line to Download Sample
    DownloadSample(i['sha256_hash'])

# Creating DataFrame from the malwares list
df = pd.DataFrame(malwares)

# Replacing 'file_name' column data with 'sha256_hash'
df['file_name'] = df['sha256_hash']

# Saving the DataFrame in the form of csv
df.to_csv("%s/Malware-Bazar-%s-scraped-api.csv" % (csv_dir, SearchMalwareFamily), index=False)


print("Success.....")

# Mettez en pause le script pendant 5 secondes
time.sleep(3)

# Chemin du dossier contenant les archives ZIP
dossier_zip = '/var/www/html/Downloaded/samples'

# Mot de passe pour les archives ZIP
mot_de_passe = 'infected'

# Fonction pour dézipper un fichier
def dezipper_archive(archive_path):
    try:
        subprocess.run(['7z', 'x', '-p' + mot_de_passe, '-o' + dossier_zip, archive_path])
        print(f'Décompression de {archive_path} réussie.')
    except Exception as e:
        print(f'Erreur lors de la décompression de {archive_path}: {str(e)}')

# Parcourir les fichiers dans le dossier ZIP
for root, dirs, files in os.walk(dossier_zip):
    for file in files:
        if file.endswith('.zip'):
            archive_path = os.path.join(root, file)
            dezipper_archive(archive_path)
            os.remove(archive_path)
            print(f'{archive_path} supprimé.')

print('Tâche de décompression terminée.')

time.sleep(1)


# La commande pour désactiver la surveillance en temps réel de Windows Defender
powershell_command = (
    'VBoxManage guestcontrol "sandbox" run --exe '
    '"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe" --username oem --password oem '
    '-- -Command "& {Start-Process powershell -ArgumentList \'Set-MpPreference -DisableRealtimeMonitoring \$true\' -Verb RunAs}"'
)

# Exécutez la commande pour désactiver la surveillance en temps réel de Windows Defender
try:
    subprocess.run(powershell_command, shell=True, check=True)
    print("Commande PowerShell exécutée avec succès sur la VM.")
except subprocess.CalledProcessError as e:
    print(f"Erreur lors de l'exécution de la commande PowerShell : {e}")

# Fin du script

time.sleep(5)

# Dossier source sur la machine hôte
source_directory = "/var/www/html/Downloaded/samples"

# Dossier de destination sur la machine virtuelle
destination_directory = "C:\\Users\\oem\\Documents\\malware_upload"

# Nom de la machine virtuelle
vm_name = "sandbox"

# Identifiants de la machine virtuelle
username = "oem"
password = "oem"

# Liste tous les fichiers dans le dossier source
for file in os.listdir(source_directory):
    full_file_path = os.path.join(source_directory, file)
    if os.path.isfile(full_file_path):
        # Construit la commande VBoxManage pour chaque fichier
        vboxmanage_command = f'sudo VBoxManage guestcontrol "{vm_name}" copyto --username {username} --password {password} --target-directory "{destination_directory}" "{full_file_path}"'
        # Exécute la commande
        subprocess.run(vboxmanage_command, shell=True)